
B7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000928  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000344  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	52 c0       	rjmp	.+164    	; 0xaa <__bad_interrupt>
   6:	00 00       	nop
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	00 00       	nop
   c:	4e c0       	rjmp	.+156    	; 0xaa <__bad_interrupt>
   e:	00 00       	nop
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	00 00       	nop
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	00 00       	nop
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
  1e:	00 00       	nop
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
  22:	00 00       	nop
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	00 00       	nop
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3e c0       	rjmp	.+124    	; 0xaa <__bad_interrupt>
  2e:	00 00       	nop
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	00 00       	nop
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	36 c0       	rjmp	.+108    	; 0xaa <__bad_interrupt>
  3e:	00 00       	nop
  40:	34 c0       	rjmp	.+104    	; 0xaa <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c0       	rjmp	.+100    	; 0xaa <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c0       	rjmp	.+96     	; 0xaa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c0       	rjmp	.+92     	; 0xaa <__bad_interrupt>
  4e:	00 00       	nop
  50:	2c c0       	rjmp	.+88     	; 0xaa <__bad_interrupt>
  52:	00 00       	nop
  54:	2a c0       	rjmp	.+84     	; 0xaa <__bad_interrupt>
  56:	00 00       	nop
  58:	28 c0       	rjmp	.+80     	; 0xaa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c0       	rjmp	.+76     	; 0xaa <__bad_interrupt>
  5e:	00 00       	nop
  60:	24 c0       	rjmp	.+72     	; 0xaa <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c0       	rjmp	.+68     	; 0xaa <__bad_interrupt>
  66:	00 00       	nop
  68:	20 c0       	rjmp	.+64     	; 0xaa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1e c0       	rjmp	.+60     	; 0xaa <__bad_interrupt>
  6e:	00 00       	nop
  70:	1c c0       	rjmp	.+56     	; 0xaa <__bad_interrupt>
  72:	00 00       	nop
  74:	1a c0       	rjmp	.+52     	; 0xaa <__bad_interrupt>
  76:	00 00       	nop
  78:	18 c0       	rjmp	.+48     	; 0xaa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	16 c0       	rjmp	.+44     	; 0xaa <__bad_interrupt>
  7e:	00 00       	nop
  80:	14 c0       	rjmp	.+40     	; 0xaa <__bad_interrupt>
  82:	00 00       	nop
  84:	12 c0       	rjmp	.+36     	; 0xaa <__bad_interrupt>
  86:	00 00       	nop
  88:	10 c0       	rjmp	.+32     	; 0xaa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6e 00       	.word	0x006e	; ????
  8e:	71 00       	.word	0x0071	; ????
  90:	76 00       	.word	0x0076	; ????
  92:	7b 00       	.word	0x007b	; ????
  94:	80 00       	.word	0x0080	; ????
  96:	85 00       	.word	0x0085	; ????
  98:	8a 00       	.word	0x008a	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e1       	ldi	r29, 0x10	; 16
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	3b d0       	rcall	.+118    	; 0x11e <main>
  a8:	4f c0       	rjmp	.+158    	; 0x148 <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <wait>:
#include <util/delay.h>

void wait(int ms)
{
	int i;
	for(i = 0; i < ms; i++)
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	6c f4       	brge	.+26     	; 0xcc <wait+0x20>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef ec       	ldi	r30, 0xCF	; 207
  b8:	f7 e0       	ldi	r31, 0x07	; 7
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <wait+0xe>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <wait+0x14>
  c0:	00 00       	nop
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	82 17       	cp	r24, r18
  c8:	93 07       	cpc	r25, r19
  ca:	a9 f7       	brne	.-22     	; 0xb6 <wait+0xa>
  cc:	08 95       	ret

000000ce <setCharliePlexingLed>:
}

/*	Control LED 1-6, or use 0 to turn all off.*/
void setCharliePlexingLed(int lednr)
{
	switch(lednr)
  ce:	87 30       	cpi	r24, 0x07	; 7
  d0:	91 05       	cpc	r25, r1
  d2:	20 f5       	brcc	.+72     	; 0x11c <setCharliePlexingLed+0x4e>
  d4:	fc 01       	movw	r30, r24
  d6:	ea 5b       	subi	r30, 0xBA	; 186
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	2d c0       	rjmp	.+90     	; 0x136 <__tablejump2__>
	{
		case 0:
			DDRA = 0x00;
  dc:	1a ba       	out	0x1a, r1	; 26
			PORTA = 0x00;
  de:	1b ba       	out	0x1b, r1	; 27
			break;
  e0:	08 95       	ret
		case 1:
			DDRA = 0x03;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x01;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8b bb       	out	0x1b, r24	; 27
			break;
  ea:	08 95       	ret
		case 2:
			DDRA = 0x03;
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x02;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	8b bb       	out	0x1b, r24	; 27
			break;
  f4:	08 95       	ret
		case 3:
			DDRA = 0x06;
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x02;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	8b bb       	out	0x1b, r24	; 27
			break;
  fe:	08 95       	ret
		case 4:
			DDRA = 0x06;
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x04;
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	8b bb       	out	0x1b, r24	; 27
			break;
 108:	08 95       	ret
		case 5:
			DDRA = 0x05;
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x04;
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	8b bb       	out	0x1b, r24	; 27
			break;
 112:	08 95       	ret
		case 6:
			DDRA = 0x05;
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0x01;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	08 95       	ret

0000011e <main>:
{
    /* Replace with your application code */
	int i;
    while (1) 
    {
		for (i = 0; i <= 6; i++)
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
		{
			setCharliePlexingLed(i);
 122:	ce 01       	movw	r24, r28
 124:	d4 df       	rcall	.-88     	; 0xce <setCharliePlexingLed>
			wait(500);
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	c0 df       	rcall	.-128    	; 0xac <wait>
{
    /* Replace with your application code */
	int i;
    while (1) 
    {
		for (i = 0; i <= 6; i++)
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	c7 30       	cpi	r28, 0x07	; 7
 130:	d1 05       	cpc	r29, r1
 132:	b9 f7       	brne	.-18     	; 0x122 <main+0x4>
 134:	f4 cf       	rjmp	.-24     	; 0x11e <main>

00000136 <__tablejump2__>:
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	00 24       	eor	r0, r0
 13c:	00 1c       	adc	r0, r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	07 90       	elpm	r0, Z+
 142:	f6 91       	elpm	r31, Z
 144:	e0 2d       	mov	r30, r0
 146:	09 94       	ijmp

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
