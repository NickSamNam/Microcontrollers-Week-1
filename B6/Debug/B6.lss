
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000002c0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a93  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f6  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041f  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 35       	cpi	r26, 0x5C	; 92
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	56 d0       	rcall	.+172    	; 0x160 <main>
  b4:	03 c1       	rjmp	.+518    	; 0x2bc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
}

int isBitChecked(int byte, int index) {
	int mask = 1<<index;
	return (byte & mask) != 0;
}
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <indicateSpeed>:

void indicateSpeed()
{
	switch (speed)
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
  de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
  e2:	8a 3f       	cpi	r24, 0xFA	; 250
  e4:	91 05       	cpc	r25, r1
  e6:	59 f0       	breq	.+22     	; 0xfe <indicateSpeed+0x24>
  e8:	84 3f       	cpi	r24, 0xF4	; 244
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	92 07       	cpc	r25, r18
  ee:	21 f0       	breq	.+8      	; 0xf8 <indicateSpeed+0x1e>
  f0:	84 36       	cpi	r24, 0x64	; 100
  f2:	91 05       	cpc	r25, r1
  f4:	49 f4       	brne	.+18     	; 0x108 <indicateSpeed+0x2e>
  f6:	06 c0       	rjmp	.+12     	; 0x104 <indicateSpeed+0x2a>
	{
		case speed_0:
		PORTE = 0x01;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 b9       	out	0x03, r24	; 3
		break;
  fc:	08 95       	ret
		case speed_1:
		PORTE = 0x03;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	83 b9       	out	0x03, r24	; 3
		break;
 102:	08 95       	ret
		case speed_2:
		PORTE = 0x07;
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	83 b9       	out	0x03, r24	; 3
 108:	08 95       	ret

0000010a <updateKeys>:
	}
}

void updateKeys()
{
	if (isBitChecked(PINE, 7))
 10a:	0f 9b       	sbis	0x01, 7	; 1
 10c:	24 c0       	rjmp	.+72     	; 0x156 <updateKeys+0x4c>
	{
		switch (speed)
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 112:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 116:	8a 3f       	cpi	r24, 0xFA	; 250
 118:	91 05       	cpc	r25, r1
 11a:	79 f0       	breq	.+30     	; 0x13a <updateKeys+0x30>
 11c:	84 3f       	cpi	r24, 0xF4	; 244
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	92 07       	cpc	r25, r18
 122:	21 f0       	breq	.+8      	; 0x12c <updateKeys+0x22>
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	91 05       	cpc	r25, r1
 128:	a9 f4       	brne	.+42     	; 0x154 <updateKeys+0x4a>
 12a:	0e c0       	rjmp	.+28     	; 0x148 <updateKeys+0x3e>
		{
			case speed_0:
				speed = speed_1;
 12c:	8a ef       	ldi	r24, 0xFA	; 250
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
				break;
 138:	0d c0       	rjmp	.+26     	; 0x154 <updateKeys+0x4a>
			case speed_1:
				speed = speed_2;
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
				break;
 146:	06 c0       	rjmp	.+12     	; 0x154 <updateKeys+0x4a>
			case speed_2:
				speed = speed_0;
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
				break;
		}
		indicateSpeed();
 154:	c2 df       	rcall	.-124    	; 0xda <indicateSpeed>
	}
	prev_button_t = 0;
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 15e:	08 95       	ret

00000160 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 164:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 166:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 168:	81 bb       	out	0x11, r24	; 17
	
	DDRF = 0x00;
 16a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

	DDRE = 0x7F;
 16e:	8f e7       	ldi	r24, 0x7F	; 127
 170:	82 b9       	out	0x02, r24	; 2
	
	indicateSpeed();
 172:	b3 df       	rcall	.-154    	; 0xda <indicateSpeed>
 174:	0f 2e       	mov	r0, r31
 176:	fc e5       	ldi	r31, 0x5C	; 92
 178:	8f 2e       	mov	r8, r31
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	9f 2e       	mov	r9, r31
 17e:	f0 2d       	mov	r31, r0
 180:	0f 2e       	mov	r0, r31
 182:	f4 e4       	ldi	r31, 0x44	; 68
 184:	cf 2e       	mov	r12, r31
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	df 2e       	mov	r13, r31
 18a:	f0 2d       	mov	r31, r0
 18c:	c4 e4       	ldi	r28, 0x44	; 68
 18e:	d1 e0       	ldi	r29, 0x01	; 1
 190:	2d c0       	rjmp	.+90     	; 0x1ec <main+0x8c>
    {
		int s;
		for (s = 0; s < snek_size_startup; s++)
		{
			int t;
			for (t = 0; t < speed; t++)
 192:	e1 2c       	mov	r14, r1
 194:	f1 2c       	mov	r15, r1
			{
				PORTA = snek_startup[s][0];
 196:	88 81       	ld	r24, Y
 198:	8b bb       	out	0x1b, r24	; 27
				PORTB = snek_startup[s][1];
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	88 bb       	out	0x18, r24	; 24
				PORTC = snek_startup[s][2];
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	85 bb       	out	0x15, r24	; 21
				PORTD = snek_startup[s][3];
 1a2:	8e 81       	ldd	r24, Y+6	; 0x06
 1a4:	82 bb       	out	0x12, r24	; 18
				if (prev_button_t >= button_wait)
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ae:	84 36       	cpi	r24, 0x64	; 100
 1b0:	91 05       	cpc	r25, r1
				{
					updateKeys();
 1b2:	0c f0       	brlt	.+2      	; 0x1b6 <main+0x56>
 1b4:	aa df       	rcall	.-172    	; 0x10a <updateKeys>
				}
				wait(1);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	7e df       	rcall	.-260    	; 0xb8 <wait>
				prev_button_t++;
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    {
		int s;
		for (s = 0; s < snek_size_startup; s++)
		{
			int t;
			for (t = 0; t < speed; t++)
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	e8 1a       	sub	r14, r24
 1d2:	f8 0a       	sbc	r15, r24
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 1dc:	e8 16       	cp	r14, r24
 1de:	f9 06       	cpc	r15, r25
 1e0:	d4 f2       	brlt	.-76     	; 0x196 <main+0x36>
 1e2:	28 96       	adiw	r28, 0x08	; 8
	indicateSpeed();
	
    while (1) 
    {
		int s;
		for (s = 0; s < snek_size_startup; s++)
 1e4:	8c 16       	cp	r8, r28
 1e6:	9d 06       	cpc	r9, r29
 1e8:	09 f4       	brne	.+2      	; 0x1ec <main+0x8c>
 1ea:	62 c0       	rjmp	.+196    	; 0x2b0 <main+0x150>
		{
			int t;
			for (t = 0; t < speed; t++)
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 1f4:	18 16       	cp	r1, r24
 1f6:	19 06       	cpc	r1, r25
 1f8:	64 f2       	brlt	.-104    	; 0x192 <main+0x32>
 1fa:	f3 cf       	rjmp	.-26     	; 0x1e2 <main+0x82>
		for(b = 0; b < snek_blocks; b++)
		{
			for (y = 0; y < snek_size_y; y++)
			{
				int t;
				for (t = 0; t < speed; t++)
 1fc:	e1 2c       	mov	r14, r1
 1fe:	f1 2c       	mov	r15, r1
				{
					PORTA = snek_pattern[y][0] << b*2;
 200:	88 81       	ld	r24, Y
 202:	99 81       	ldd	r25, Y+1	; 0x01
 204:	01 2e       	mov	r0, r17
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0xac>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <main+0xa8>
 210:	8b bb       	out	0x1b, r24	; 27
					PORTB = snek_pattern[y][1] << b*2;
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	9b 81       	ldd	r25, Y+3	; 0x03
 216:	01 2e       	mov	r0, r17
 218:	02 c0       	rjmp	.+4      	; 0x21e <main+0xbe>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <main+0xba>
 222:	88 bb       	out	0x18, r24	; 24
					PORTC = snek_pattern[y][2] << b*2;
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	9d 81       	ldd	r25, Y+5	; 0x05
 228:	01 2e       	mov	r0, r17
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0xd0>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <main+0xcc>
 234:	85 bb       	out	0x15, r24	; 21
					PORTD = snek_pattern[y][3] << b*2;
 236:	8e 81       	ldd	r24, Y+6	; 0x06
 238:	9f 81       	ldd	r25, Y+7	; 0x07
 23a:	01 2e       	mov	r0, r17
 23c:	02 c0       	rjmp	.+4      	; 0x242 <main+0xe2>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <main+0xde>
 246:	82 bb       	out	0x12, r24	; 18
					if (prev_button_t >= button_wait)
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 250:	84 36       	cpi	r24, 0x64	; 100
 252:	91 05       	cpc	r25, r1
					{
						updateKeys();
 254:	0c f0       	brlt	.+2      	; 0x258 <main+0xf8>
					}
					wait(1);
 256:	59 df       	rcall	.-334    	; 0x10a <updateKeys>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2d df       	rcall	.-422    	; 0xb8 <wait>
					prev_button_t++;
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		for(b = 0; b < snek_blocks; b++)
		{
			for (y = 0; y < snek_size_y; y++)
			{
				int t;
				for (t = 0; t < speed; t++)
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	e8 1a       	sub	r14, r24
 274:	f8 0a       	sbc	r15, r24
 276:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 27a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 27e:	e8 16       	cp	r14, r24
 280:	f9 06       	cpc	r15, r25
 282:	0c f4       	brge	.+2      	; 0x286 <main+0x126>
 284:	bd cf       	rjmp	.-134    	; 0x200 <main+0xa0>
 286:	28 96       	adiw	r28, 0x08	; 8
		}
		int y;
		int b;
		for(b = 0; b < snek_blocks; b++)
		{
			for (y = 0; y < snek_size_y; y++)
 288:	cc 16       	cp	r12, r28
 28a:	dd 06       	cpc	r13, r29
 28c:	49 f0       	breq	.+18     	; 0x2a0 <main+0x140>
			{
				int t;
				for (t = 0; t < speed; t++)
 28e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 292:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 296:	18 16       	cp	r1, r24
 298:	19 06       	cpc	r1, r25
 29a:	0c f4       	brge	.+2      	; 0x29e <main+0x13e>
 29c:	af cf       	rjmp	.-162    	; 0x1fc <main+0x9c>
 29e:	f3 cf       	rjmp	.-26     	; 0x286 <main+0x126>
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	a8 0e       	add	r10, r24
 2a4:	b1 1c       	adc	r11, r1
				prev_button_t++;
			}
		}
		int y;
		int b;
		for(b = 0; b < snek_blocks; b++)
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	a8 16       	cp	r10, r24
 2aa:	b1 04       	cpc	r11, r1
 2ac:	19 f4       	brne	.+6      	; 0x2b4 <main+0x154>
 2ae:	6e cf       	rjmp	.-292    	; 0x18c <main+0x2c>
 2b0:	a1 2c       	mov	r10, r1
 2b2:	b1 2c       	mov	r11, r1
			for (y = 0; y < snek_size_y; y++)
			{
				int t;
				for (t = 0; t < speed; t++)
				{
					PORTA = snek_pattern[y][0] << b*2;
 2b4:	1a 2d       	mov	r17, r10
 2b6:	c4 e0       	ldi	r28, 0x04	; 4
 2b8:	d1 e0       	ldi	r29, 0x01	; 1
 2ba:	e9 cf       	rjmp	.-46     	; 0x28e <main+0x12e>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
